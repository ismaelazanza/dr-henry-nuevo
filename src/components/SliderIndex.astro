---
import { Icon } from "astro-icon/components";
import FlechaDerechaIcon from '../assets/icon/SolarArrowRightLinear.svg';
import FlechaIzquierdaIcon from '../assets/icon/SolarArrowLeftLinear.svg';
---
<section class="">
    <div class="">
        <div class="top-slider">
            <div class="slides">
                <div class="slide welcome-slide">
                  <img class="object-cover" src="/img/1.avif" alt="Imagen">
                </div>
                <div class="slide rewards-slide">
                  <img class="object-cover" src="/img/2.avif" alt="Imagen">
                </div>
                <div class="slide affiliate-slide">
                  <img class="object-cover" src="/img/3.avif" alt="Imagen">
                </div>
                <div class="slide affiliate-slide">
                  <img class="object-cover" src="/img/4.avif" alt="Imagen">
                </div>
                <div class="slide affiliate-slide">
                  <img class="object-cover" src="/img/5.avif" alt="Imagen">
                </div>
            </div>
            <button class="slider-arrow left" aria-label="Previous slide">
                <img class="" src={FlechaIzquierdaIcon.src} width="20" height="20" alt="Icon">
            </button>
            <button class="slider-arrow right" aria-label="Next slide">
                <img class="" src={FlechaDerechaIcon.src} width="20" height="20" alt="Icon">
            </button>
            <div class="slider-nav"></div>
        </div>
    </div>

</section>
</html>

<style>

.top-slider {
    position: relative;
    height: 100%;
    overflow: hidden;
    /*
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    */ 
}

.slides {
    display: flex;
    height: 700px;
    transition: transform 0.5s cubic-bezier(0.645, 0.045, 0.355, 1);
}

.slide {
    flex: 0 0 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    padding: 0rem;
    background-size: 200% 200%;
    animation: gradientAnimation 10s ease infinite;
}

@keyframes gradientAnimation {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}


.slide h2 {
    font-size: 3rem;
    margin-bottom: 1rem;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
}

.slide p {
    font-size: 1.5rem;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
}

.slider-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: #58a0cd;
    color: white;
    border: none;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    font-size: 1.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    justify-content: center;
    align-items: center;
}

.slider-arrow:hover {
    background-color: rgba(255, 255, 255, 0.4);
}

.slider-arrow.left { left: 20px; }
.slider-arrow.right { right: 20px; }

.slider-nav {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 10px;
}

.slider-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.5);
    cursor: pointer;
    transition: all 0.3s ease;
}

.slider-dot.active {
    background-color: white;
    transform: scale(1.2);
}

.game-options {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-top: 2rem;
}

.option {
    background: linear-gradient(135deg, #2c2c2c 0%, #1a1a1a 100%);
    border-radius: 15px;
    padding: 1.5rem;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    overflow: hidden;
    position: relative;
}

.option::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(255,255,255,0.2) 0%, rgba(255,255,255,0) 70%);
    opacity: 0;
    transition: opacity 0.3s ease;
}

.option:hover::before {
    opacity: 1;
}

.option:hover {
    transform: translateY(-10px);
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3);
}

.option .icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: white;
    transition: all 0.3s ease;
}

.option:hover .icon {
    transform: scale(1.2);
}

.option p {
    font-size: 1rem;
    font-weight: 600;
    text-transform: uppercase;
}

@keyframes coinFlip {
    0%, 100% { transform: rotateY(0); }
    50% { transform: rotateY(180deg); }
}

@keyframes swordSlash {
    0%, 100% { transform: rotate(0); }
    50% { transform: rotate(-30deg); }
}

@keyframes boxOpen {
    0%, 100% { transform: scaleY(1); }
    50% { transform: scaleY(0.8); }
}

@keyframes wheelSpin {
    0% { transform: rotate(0); }
    100% { transform: rotate(360deg); }
}

@keyframes upgradeJump {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-10px); }
}

.option:hover .icon .fa-coins { animation: coinFlip 1s ease infinite; }
.option:hover .icon .fa-khanda { animation: swordSlash 1s ease infinite; }
.option:hover .icon .fa-box-open { animation: boxOpen 1s ease infinite; }
.option:hover .icon .fa-dharmachakra { animation: wheelSpin 2s linear infinite; }
.option:hover .icon .fa-angles-up { animation: upgradeJump 1s ease infinite; }

@media (max-width: 768px) {
    .top-slider {
        height: 300px;
    }

    .slide h2 {
        font-size: 2rem;
    }

    .slide p {
        font-size: 1rem;
    }

    .game-options {
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    }
}
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const slides = document.querySelector('.slides');
    const sliderNav = document.querySelector('.slider-nav');
    const leftArrow = document.querySelector('.slider-arrow.left');
    const rightArrow = document.querySelector('.slider-arrow.right');
    const totalSlides = document.querySelectorAll('.slide').length;
    let currentSlide = 0;

    for (let i = 0; i < totalSlides; i++) {
        const dot = document.createElement('span');
        dot.classList.add('slider-dot');
        if (i === 0) dot.classList.add('active');
        sliderNav.appendChild(dot);
    }

    const dots = document.querySelectorAll('.slider-dot');

    function showSlide(index) {
        slides.style.transform = `translateX(-${index * 100}%)`;
        dots.forEach((dot, i) => {
            dot.classList.toggle('active', i === index);
        });
    }

    function nextSlide() {
        currentSlide = (currentSlide + 1) % totalSlides;
        showSlide(currentSlide);
    }

    function prevSlide() {
        currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
        showSlide(currentSlide);
    }

    dots.forEach((dot, index) => {
        dot.addEventListener('click', () => {
            currentSlide = index;
            showSlide(currentSlide);
        });
    });

    leftArrow.addEventListener('click', prevSlide);
    rightArrow.addEventListener('click', nextSlide);

    let startX, moveX;
    let isDragging = false;

    slides.addEventListener('touchstart', (e) => {
        startX = e.touches[0].pageX;
        isDragging = true;
    });

    slides.addEventListener('touchmove', (e) => {
        if (!isDragging) return;
        moveX = e.touches[0].pageX;
        const diff = moveX - startX;
        slides.style.transform = `translateX(calc(-${currentSlide * 100}% + ${diff}px))`;
    });

    slides.addEventListener('touchend', (e) => {
        isDragging = false;
        const diff = moveX - startX;
        if (Math.abs(diff) > 100) {
            if (diff > 0) prevSlide();
            else nextSlide();
        } else {
            showSlide(currentSlide);
        }
    });

    slides.addEventListener('mousedown', (e) => {
        startX = e.pageX;
        isDragging = true;
    });

    slides.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        moveX = e.pageX;
        const diff = moveX - startX;
        slides.style.transform = `translateX(calc(-${currentSlide * 100}% + ${diff}px))`;
    });

    slides.addEventListener('mouseup', () => {
        isDragging = false;
        const diff = moveX - startX;
        if (Math.abs(diff) > 100) {
            if (diff > 0) prevSlide();
            else nextSlide();
        } else {
            showSlide(currentSlide);
        }
    });

    slides.addEventListener('mouseleave', () => {
        if (isDragging) {
            isDragging = false;
            showSlide(currentSlide);
        }
    });
  
    let autoSlideInterval = setInterval(nextSlide, 6000);

    slides.addEventListener('mouseenter', () => {
        clearInterval(autoSlideInterval);
    });

    slides.addEventListener('mouseleave', () => {
        autoSlideInterval = setInterval(nextSlide, 6000);
    });

    const options = document.querySelectorAll('.option');
    options.forEach(option => {
        option.addEventListener('mouseenter', () => {
            option.style.transform = 'translateY(-10px) scale(1.05)';
        });
        option.addEventListener('mouseleave', () => {
            option.style.transform = 'translateY(0) scale(1)';
        });
    });
});
</script>